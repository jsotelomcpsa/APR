---
title: "APR App"
format: html
editor: visual
---

```{r}
# Load required libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyverse)
library(stringr)
library(ggrepel)

# Data cleaning functions
clean_pct_column <- function(x) {
  x[x %in% c("NA", "N/A", "", "NULL")] <- NA
  x <- gsub("[%\\s]", "", as.character(x))
  as.numeric(x)
}

data_prep <- function(data) {
  pct_cols <- grep("_PCT$", names(data), value = TRUE)
  
  cleaned_data <- data %>%
    mutate(across(all_of(pct_cols), ~ifelse(. == "NA" | . == "", NA, .))) %>%
    mutate(across(all_of(pct_cols), clean_pct_column)) %>%
    filter(!is.na(.data[[pct_cols[1]]]))
  
  return(cleaned_data)
}

get_pct_vars <- function(data) {
  vars <- names(data)[grep("_PCT$", names(data))]
  readable_names <- gsub("_PCT$", "", vars)
  readable_names <- gsub("_", " ", readable_names)
  readable_names <- sapply(strsplit(readable_names, " "), function(word_parts) {
    paste(toupper(substring(word_parts, 1, 1)), substring(word_parts, 2), 
          sep = "", collapse = " ")
  })
  names(vars) <- readable_names
  vars
}

format_label <- function(var_name) {
  label <- gsub("_PCT$", "", var_name)
  label <- gsub("_", " ", label)
  label <- sapply(strsplit(label, " "), function(word_parts) {
    paste(toupper(substring(word_parts, 1, 1)), substring(word_parts, 2), 
          sep = "", collapse = " ")
  })
  return(label)
}

# UI Definition
ui <- fluidPage(
  tags$head(
    tags$style("
      body { background-color: #FFFFFF; color: #333333; font-family: Arial, sans-serif; padding: 20px; }
      .container-fluid { max-width: 1400px; margin: 0 auto; padding: 0 20px; }
      .well { background-color: #F8F9FA; border: 1px solid #E9ECEF; border-radius: 8px; 
              box-shadow: 0 2px 4px rgba(0,0,0,0.05); margin-right: 20px; padding: 20px; min-width: 350px; }
      .selectize-input { width: 100% !important; min-width: 300px; max-width: 350px; }
      .selectize-dropdown { width: 100% !important; max-width: 350px; }
      .logo-container { text-align: center; margin-bottom: 30px; padding: 20px; }
      .logo { max-width: 400px; height: auto; }
      h2 { color: #84C5A8; font-weight: bold; }
      #scatterplot { width: 100% !important; min-height: 600px; }
      .col-sm-8 { padding-left: 30px; }
      .percentile-table { width: 100%; border-collapse: collapse; margin-top: 20px; }
      .percentile-table th, .percentile-table td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
      .percentile-table th { background-color: #f2f2f2; font-weight: bold; }
      .percentile-table tr:hover { background-color: #f5f5f5; }
      .selected-school { font-weight: bold; color: #E84855; }
      .average-school { font-weight: bold; color: #FFD700; }
    ")
  ),
  
  fluidRow(
    column(12,
           div(class = "logo-container",
               conditionalPanel(
                 "typeof window.logoChecked === 'undefined'",
                 tags$script("
                   window.logoChecked = true;
                   var img = new Image();
                   img.onload = function() {
                     document.getElementById('logo-text').style.display = 'none';
                   };
                   img.onerror = function() {
                     document.getElementById('logo-image').style.display = 'none';
                   };
                   img.src = 'mcpsa_logo.png';
                 ")
               ),
               img(id = "logo-image", src = "mcpsa_logo.png", class = "logo", alt = "MCPSA Logo"),
               h1(id = "logo-text", "MCPSA", style = "color: #84C5A8; font-weight: bold; display: none;")
           )
    )
  ),
  
  titlePanel(div(style = "color: #84C5A8;", "School Performance Comparison")),
  
  sidebarLayout(
    sidebarPanel(width = 4,
                 div(style = "max-width: 350px;",
                     selectizeInput("xvar", "X-axis Variable:", 
                                    choices = NULL,
                                    options = list(dropdownParent = 'body')),
                     selectizeInput("yvar", "Y-axis Variable:", 
                                    choices = NULL,
                                    options = list(dropdownParent = 'body')),
                     selectizeInput("school_select", "Select Schools:", 
                                    choices = NULL, 
                                    multiple = TRUE,
                                    options = list(
                                      placeholder = 'Select one or more schools',
                                      plugins = list('remove_button')
                                    ))
                 )
    ),
    
    mainPanel(width = 8,
              plotOutput("scatterplot"),
              div(class = "table-container",
                 tableOutput("percentile_table")
              )
    )
  )
)

# Server Logic
server <- function(input, output, session) {
  apr_2024 <- read_excel("data/2024 Mo APR .xlsx")
  
  observe({
    pct_vars <- get_pct_vars(apr_2024)
    updateSelectizeInput(session, "xvar", choices = pct_vars)
    updateSelectizeInput(session, "yvar", choices = pct_vars)
  })
  
  observe({
    all_schools <- apr_2024 %>%
      data_prep() %>%
      filter(TYPE %in% c("Charter", "Average")) %>%
      pull(DISTRICT_NAME) %>%
      unique()
    
    average_school <- all_schools[grepl("Average", all_schools)]
    other_schools <- setdiff(all_schools, average_school) %>% sort()
    
    filtered_schools <- c(average_school, other_schools)
    
    updateSelectizeInput(session, "school_select", choices = filtered_schools)
  })
  
  create_plot <- function(plot_data, x_var, y_var, schools) {
    x_min <- max(0, floor(min(plot_data[[x_var]], na.rm = TRUE) - 10))
    y_min <- max(0, floor(min(plot_data[[y_var]], na.rm = TRUE) - 10))
    
    x_label <- format_label(x_var)
    y_label <- format_label(y_var)
    
    p <- ggplot(data = plot_data)
    
    p <- p + geom_point(
      aes_string(
        x = x_var,
        y = y_var,
        color = "TYPE",
        alpha = "TYPE"
      ),
      size = 4
    )
    
    p <- p + scale_color_manual(
      values = c(
        "Average" = "#FFD700",
        "Charter" = "#84C5A8",
        "District" = "grey50"
      ),
      labels = c("Average", "Charter", "District"),
      name = "School Type"
    )
    
    p <- p + scale_alpha_manual(
      values = c(
        "Average" = 1,
        "Charter" = 1,
        "District" = 0.15
      ),
      guide = "none"
    )
    
    p <- p + scale_x_continuous(
      limits = c(x_min, 100),
      breaks = seq(0, 100, 10),
      labels = function(x) paste0(x, "%")
    )
    
    p <- p + scale_y_continuous(
      limits = c(y_min, 100),
      breaks = seq(0, 100, 10),
      labels = function(y) paste0(y, "%")
    )
    
    if (!is.null(schools) && length(schools) > 0) {
      selected <- plot_data[plot_data$DISTRICT_NAME %in% schools, ]
      
      p <- p + geom_point(
        data = selected,
        aes_string(x = x_var, y = y_var),
        color = "#E84855",
        size = 5
      )
      
      p <- p + geom_text_repel(
        data = selected,
        aes_string(x = x_var, y = y_var, label = "DISTRICT_NAME"),
        size = 4,
        point.padding = 0.5,
        box.padding = 0.5,
        force = 2,
        color = "#E84855"
      )
    }
    
    p <- p + theme_minimal()
    
    p <- p + theme(
      text = element_text(family = "Arial"),
      plot.title = element_text(size = 16, face = "bold", color = "#333333"),
      axis.title = element_text(size = 12, color = "#666666"),
      legend.position = "bottom",
      legend.title = element_text(face = "bold"),
      panel.grid.minor = element_blank(),
      panel.grid.major = element_line(color = "#E9ECEF"),
      plot.background = element_rect(fill = "white", color = NA)
    )
    
    p <- p + labs(
      x = paste0(x_label, " (%)"),
      y = paste0(y_label, " (%)")
    )
    
    return(p)
  }
  
  create_percentile_table <- function(plot_data, x_var, y_var, schools) {
    x_percentiles <- ecdf(plot_data[[x_var]])
    y_percentiles <- ecdf(plot_data[[y_var]])
    
    selected <- plot_data[plot_data$DISTRICT_NAME %in% schools, ]
    
    result <- data.frame(
      "School Name" = selected$DISTRICT_NAME,
      "School Type" = selected$TYPE,
      "X Value" = paste0(round(selected[[x_var]], 1), "%"),
      "X Percentile" = paste0(round(x_percentiles(selected[[x_var]]) * 100, 1), "%"),
      "Y Value" = paste0(round(selected[[y_var]], 1), "%"),
      "Y Percentile" = paste0(round(y_percentiles(selected[[y_var]]) * 100, 1), "%"),
      stringsAsFactors = FALSE
    )
    
    x_name <- format_label(x_var)
    y_name <- format_label(y_var)
    
    colnames(result)[3:6] <- c(
      paste0(x_name, " Value"),
      paste0(x_name, " Percentile"),
      paste0(y_name, " Value"),
      paste0(y_name, " Percentile")
    )
    
    return(result)
  }
  
  output$scatterplot <- renderPlot({
    validate(need(input$xvar, "Please select X-axis variable"))
    validate(need(input$yvar, "Please select Y-axis variable"))
    
    x_var <- input$xvar
    y_var <- input$yvar
    schools <- input$school_select
    
    plot_data <- data_prep(apr_2024)
    valid_rows <- !is.na(plot_data[[x_var]]) & !is.na(plot_data[[y_var]])
    plot_data <- plot_data[valid_rows, ]
    
    p <- create_plot(plot_data, x_var, y_var, schools)
    print(p)
  }, height = 600)
  
  output$percentile_table <- renderTable({
    validate(need(input$xvar, "Please select X-axis variable"))
    validate(need(input$yvar, "Please select Y-axis variable"))
    validate(need(input$school_select, "Please select at least one school"))
    
    if (length(input$school_select) == 0) {
      return(NULL)
    }
    
    x_var <- input$xvar
    y_var <- input$yvar
    schools <- input$school_select
    
    plot_data <- data_prep(apr_2024)
    valid_rows <- !is.na(plot_data[[x_var]]) & !is.na(plot_data[[y_var]])
    plot_data <- plot_data[valid_rows, ]
    
    create_percentile_table(plot_data, x_var, y_var, schools)
  }, sanitize.text.function = function(x) x)
}

shinyApp(ui = ui, server = server)

```
